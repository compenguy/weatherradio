use anyhow::{Context, Result};
use clap::{app_from_crate, crate_name, crate_version};
use flexi_logger::{colored_default_format, detailed_format, Logger};

mod fine_offset;
use crate::fine_offset::ToMeasurements;

fn main() -> Result<()> {
    let matches = app_from_crate!("")
        .setting(clap::AppSettings::ColorAuto)
        .setting(clap::AppSettings::ColoredHelp)
        .arg(
            clap::Arg::new("debug")
                .short('g')
                .long("debug")
                .multiple_occurrences(true)
                .hidden(true)
                .global(true)
                .about("Enable debug-level output"),
        )
        .get_matches();

    let crate_log_level = match matches.occurrences_of("debug") {
        0 => log::LevelFilter::Off,
        1 => log::LevelFilter::Error,
        2 => log::LevelFilter::Warn,
        3 => log::LevelFilter::Info,
        4 => log::LevelFilter::Debug,
        _ => log::LevelFilter::Trace,
    };
    let general_log_level = match crate_log_level {
        log::LevelFilter::Trace | log::LevelFilter::Debug => log::LevelFilter::Error,
        _ => log::LevelFilter::Off,
    };
    let spec = format!(
        "{}, {} = {}",
        general_log_level,
        crate_name!(),
        crate_log_level
    );
    Logger::try_with_str(&spec)?
        .format(detailed_format)
        .format_for_stderr(colored_default_format)
        .start()
        .with_context(|| "Failed to start FlexiLogger logging backend")?;

    log::info!("{} version {}", crate_name!(), crate_version!());

    let bitstream: Vec<Vec<u8>> = vec![
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0xc3, 0x82, 0x0a, 0x5e, 0xdf, 0xbc, 0x07, 0x56, 0xa7, 0xae, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x44, 0x92, 0x1a, 0x39, 0x5a, 0xb3, 0x07, 0x45, 0x04, 0x5f, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0xc3, 0x81, 0xd5, 0x5c, 0x2a, 0xcf, 0x08, 0x35, 0x44, 0x2c, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x35, 0xc2, 0x2f, 0x3c, 0x0f, 0xa1, 0x07, 0x52, 0x29, 0x9f, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x35, 0xc2, 0x2e, 0x3c, 0xfb, 0x8c, 0x07, 0x52, 0x29, 0x9f, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0xc9, 0xa2, 0x1e, 0x40, 0x0c, 0x05, 0x07, 0x34, 0xc6, 0xb1, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x2b, 0xb2, 0x14, 0x3d, 0x94, 0xf2, 0x08, 0x53, 0x78, 0xe6, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0xc9, 0xa2, 0x1f, 0x40, 0xf8, 0xf2, 0x07, 0x34, 0xc6, 0xb1, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x44, 0x92, 0x13, 0x3e, 0x0e, 0x65, 0x07, 0x45, 0x04, 0x5f, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0x44, 0x92, 0x15, 0x3d, 0x07, 0x5f, 0x07, 0x45, 0x04, 0x5f, 0x00, 0x00, 0x00, 0x00],
        vec![0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2d, 0xd4, 0x30, 0xc3, 0x81, 0xd6, 0x5b, 0x90, 0x35, 0x08, 0x35, 0x44, 0x2c, 0x00, 0x00, 0x00, 0x00],
    ];


    for row in bitstream {
        for measured in row.as_slice().to_measurements()? {
            print!("{}: ", measured.timestamp);
            if let Some(channel) = measured.channel {
                println!(
                    "[{:20}] Channel {} {}",
                    measured.timestamp, channel, measured.measurement
                );
            } else {
                println!("[{:20}] {}", measured.timestamp, measured.measurement);
            }
        }
    }

    Ok(())
}
